/**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Universidad de los Andes (Bogotá - Colombia)
 * Departamento de Ingeniería de Sistemas y Computación 
 * Licenciado bajo el esquema Academic Free License version 2.1 
 *
 * Proyecto Cupi2 (http://cupi2.uniandes.edu.co)
 * Ejercicio: n7_cupiViajes
 * Autor: Equipo Cupi2 2015
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 */
package uniandes.cupi2.cupiViajes.mundo;

import java.util.ArrayList;

/**
 * Clase que representa CupiViajes. <br>
 * <b> inv: </b> <br>
 * hoteles != null. <br>
 * reservas != null. <br>
 * No pueden existir dos reservas con el mismo cliente.
 */
public class CupiViajes
{
    // -------------------------------------------------------------
    // Atributos
    // -------------------------------------------------------------

    /**
     * Lista de hoteles disponibles en el sistema de viajes.
     */
    private ArrayList hoteles;

    /**
     * Lista de reservas.
     */
    private ArrayList reservas;

    // -------------------------------------------------------------
    // Constructor
    // -------------------------------------------------------------

    /**
     * Construye un nuevo sistema de viajes sin hoteles y sin reservas.<br>
     * <b> post: </b> Las listas de hoteles y de viajes han sido inicializadas.
     */
    public CupiViajes( )
    {
        hoteles = new ArrayList( );
        reservas = new ArrayList( );
        verificarInvariante( );
    }

    // -------------------------------------------------------------
    // Métodos
    // -------------------------------------------------------------

    /**
     * Retorna la lista de hoteles disponibles en el sistema.
     * @return Lista de hoteles disponibles.
     */
    public ArrayList darHoteles( )
    {
        return hoteles;
    }

    /**
     * Retorna la lista de reservas.
     * @return Lista de reservas.
     */
    public ArrayList darReservas( )
    {
        return reservas;
    }

    /**
     * Agrega una nueva reserva a la lista si no existe una reserva con el cliente dado. <br>
     * <b> pre </b>: El hotel con el nombre dado ya existe.
     * @param pHotel Hotel que se va a reservar. pHotel != null.
     * @param pDiaLlegada Día de llegada al hotel que se va a reservar. pDiaLlegada >= 1 && pDiaLlegada <= 31.
     * @param pMesLlegada Mes de llegada al hotel que se va a reservar. pMesLlegada >= 1 && pMesLlegada <= 12.
     * @param pAnioLlegada Año de llegada al hotel que se va a reservar. pAnioLlegada >= 2016 && pAnioLlegada <= 2019.
     * @param pNombreCliente Nombre del cliente responsable de la reserva. pCliente != null && pCliente != "".
     * @param pCantidadAdultos Cantidad de adultos que van a viajar al hotel que se va a reservar. pCantidadAdultos >= 1 && pCantidadAdultos <= 6.
     * @param pCantidadNinios Cantidad de niños que van a viajar al hotel que se va a reservar. pCantidadNinios >= 0 && pCantidadNinios <= 4.
     * @param pNochesEstadia Cantidad de noches de estadía en el hotel que se va a reservar. pNochesEstadia >= 1.
     * @param pAerolinea Aerolínea que se va a reservar. pAerolinea != "" && pAerolinea pertenece a {ReservaViaje.AVIANCA, ReservaViaje.LAN, ReservaViaje.VIVA_COLOMBIA,
     *        ReservaViaje.SATENA, ReservaViaje.JETBLUE, ReservaViaje.IBERIA, ReservaViaje.AIR_FRANCE}.
     * @return True si la reserva se agregó correctamente. False de lo contrario.
     */
    public boolean agregarReserva( Hotel pHotel, int pDiaLlegada, int pMesLlegada, int pAnioLlegada, String pNombreCliente, int pCantidadAdultos, int pCantidadNinios, int pNochesEstadia, String pAerolinea )
    {
        ReservaViaje buscado = buscarReserva( pNombreCliente );
        boolean agregado = false;

        if( buscado == null )
        {
            Fecha fechaLlegada = new Fecha( pDiaLlegada, pMesLlegada, pAnioLlegada );
            ReservaViaje reservaAAgregar = new ReservaViaje( pNombreCliente, pCantidadAdultos, pCantidadNinios, pNochesEstadia, pAerolinea, pHotel, fechaLlegada );
            reservas.add( reservaAAgregar );
            agregado = true;
            verificarInvariante( );
        }

        return agregado;
    }
    
    
    /**
     * Agrega un nuevo hotel a la lista de hoteles. <br>
     * @param pNombre Nombre del hotel. pNombre != null && pNombre != "".
     * @param pCiudad Ciudad en la que se encuentra el hotel. pCiudad != null && pCiudad != "".
     * @param pEstrellas Cantidad de estrellas que tiene el hotel. pEstrellas >= 1 && pEstrellas <=5.
     * @param pCostoNoche Costo por noche en el hotel. pCostoNoche >= 1.
     * @param pRutaImagen Ruta de la imagen del hotel. pRutaImagen != null && pRutaImagen != "".
     */
    public void agregarHotel( String pNombre, String pCiudad, int pEstrellas, double pCostoNoche, String pRutaImagen )
    {
        Hotel hotel = new Hotel( pNombre, pCiudad, pEstrellas, pCostoNoche, pRutaImagen );
        hoteles.add( hotel );
    }
    
    /**
     * Busca los hoteles que están en la ciudad dada por parámetro.
     * @param pCiudad Ciudad  de los hoteles que se están buscando. pCiudad != null && pCiudad != "".
     * @return Lista con los hoteles que están en la ciudad dada.
     */
    public ArrayList buscarHotelesCiudad( String pCiudad )
    {
        ArrayList respuesta = new ArrayList( );
        Hotel hotelTemp = null;
        
        for( int i = 0; i < hoteles.size( ); i++ )
        {
            hotelTemp = ( Hotel )hoteles.get( i );
            if( hotelTemp.darCiudad( ).equals( pCiudad ) )
            {
                respuesta.add( hotelTemp );
            }
        }
        
        return respuesta;
    }
    
    /**
     * Busca la reserva del cliente dado por parámetro. <br>
     * @param pCliente Cliente se la reserva que se va a buscar. pCliente != null && pCliente != "".
     * @return Reserva de viaje con el cliente dado, null en caso de no encontrarlo.
     */
    public ReservaViaje buscarReserva( String pCliente )
    {
        ReservaViaje reservaBuscada = null;
        ReservaViaje temporal = null;
        boolean encontro = false;
        for( int i = 0; i < reservas.size( ) && !encontro; i++ )
        {
            temporal = ( ReservaViaje )reservas.get( i );
            if( temporal.darNombreCliente( ).equals( pCliente ) )
            {
                reservaBuscada = temporal;
                encontro = true;
            }
        }
        return reservaBuscada;
    }

    /**
     * Busca la reserva del cliente dado por parámetro utilizando una búsqueda binaria. <br>
     * <b> pre: </b> La lista de reservas se encuentra ordenada por clientes.
     * @param pNombreCliente Nombre del cliente de la reserva que se va a buscar. pNombreCliente != null && pNombreCliente != "".
     * @return Reserva de viaje del cliente dado, null en caso de no encontrarlo.
     */
    public ReservaViaje buscarReservaPorClienteBinario( String pNombreCliente )
    {
        ReservaViaje reservaBuscada = null;
        int inicio = 0;
        int fin = reservas.size( ) - 1;
        ReservaViaje reservaABuscar = new ReservaViaje( pNombreCliente, 1, 0, 1, ReservaViaje.AVIANCA, new Hotel( "nombre", "ciudad", 1, 1, "imagen" ), new Fecha( 1, 1, 2016 ) );
        if( reservas.size( ) > 0 )
        {
            while( inicio <= fin && reservaBuscada == null )
            {
                int medio = ( inicio + fin ) / 2;
                ReservaViaje reserva = ( ReservaViaje )reservas.get( medio );
                if( reserva.compararPorCliente( reservaABuscar ) == 0 )
                {
                    reservaBuscada = reserva;
                }
                else if( reserva.compararPorCliente( reservaABuscar ) > 0 )
                {
                    fin = medio - 1;
                }
                else
                {
                    inicio = medio + 1;
                }
            }
        }

        return reservaBuscada;
    }

    /**
     * Busca la primera reserva del viaje a la ciudad dada por parámetro.
     * @param pCiudad Ciudad del hotel de la reserva que se va a buscar. pCiudad != null && pCiudad != "";
     * @return Reserva del viaje a la ciudad dada por parámetro.
     */
    public ReservaViaje buscarReservaPorCiudad( String pCiudad )
    {
        ReservaViaje buscado = null;
        ReservaViaje reservaTemp = null;
        boolean encontrado = false;

        for( int i = 0; i < reservas.size( ) && !encontrado; i++ )
        {
            reservaTemp = ( ReservaViaje )reservas.get( i );
            if( reservaTemp.darHotel( ).darCiudad( ).equals( pCiudad ) )
            {
                buscado = reservaTemp;
                encontrado = true;
            }
        }

        return buscado;
    }

    /**
     * Busca la reserva con la mayor cantidad de personas que van a viajar.
     * @return Reserva con la mayor cantidad de personas que van a viajar. <br>
     *         Si CupiViajes no tiene reservas, retorna null. Si existen varias reservas con la mayor cantidad de personas que van a viajar, se retorna la primera reserva
     *         encontrada.
     */
    public ReservaViaje buscarReservaMasPersonas( )
    {
        ReservaViaje buscado = null;

        if( reservas.size( ) > 0 )
        {
            ReservaViaje reservaMasPersonas = ( ReservaViaje )reservas.get( 0 );
            buscado = reservaMasPersonas;

            for( int i = 1; i < reservas.size( ); i++ )
            {
                ReservaViaje reservaTemp = ( ReservaViaje )reservas.get( i );
                if( reservaTemp.compararPorCantidadDePersonas( reservaMasPersonas ) == 1 )
                {
                    reservaMasPersonas = reservaTemp;
                    buscado = reservaMasPersonas;
                }
            }
        }

        return buscado;
    }

    /**
     * Busca la reserva con la menor cantidad de personas que van a viajar.
     * @return Reserva con la menor cantidad de personas que van a viajar. <br>
     *         Si CupiViajes no tiene reservas, retorna null. Si existen varias reservas con la menor cantidad de personas que van a viajar, se retorna la primera reserva
     *         encontrada.
     */
    public ReservaViaje buscarReservaMenosPersonas( )
    {
        ReservaViaje buscado = null;

        if( reservas.size( ) > 0 )
        {
            ReservaViaje reservaMenosPersonas = ( ReservaViaje )reservas.get( 0 );
            buscado = reservaMenosPersonas;

            for( int i = 1; i < reservas.size( ); i++ )
            {
                ReservaViaje reservaTemp = ( ReservaViaje )reservas.get( i );
                if( reservaTemp.compararPorCantidadDePersonas( reservaMenosPersonas ) == -1 )
                {
                    reservaMenosPersonas = reservaTemp;
                    buscado = reservaMenosPersonas;
                }
            }
        }

        return buscado;
    }

    /**
     * Busca las reservas con aerolínea dada por parámetro.
     * @param pAerolinea Aerolínea de las reservas que se están buscando. pAerolinea != "" && pAerolinea pertenece a {ReservaViaje.AVIANCA, ReservaViaje.LAN,
     *        ReservaViaje.VIVA_COLOMBIA, ReservaViaje.SATENA, ReservaViaje.JETBLUE, ReservaViaje.IBERIA, ReservaViaje.AIR_FRANCE}.
     * @return Lista de reservan con aerolínea dada.
     */
    public ArrayList buscarReservasAerolinea( String pAerolinea )
    {
        ArrayList respuesta = new ArrayList( );
        ReservaViaje reservaTemp = null;

        for( int i = 0; i < reservas.size( ); i++ )
        {
            reservaTemp = ( ReservaViaje )reservas.get( i );
            if( reservaTemp.darAerolinea( ).equals( pAerolinea ) )
            {
                respuesta.add( reservaTemp );
            }
        }

        return respuesta;
    }

    /**
     * Ordena de forma descendente la lista de reservas por su costo total utilizando el algoritmo de selección. <br>
     * <b> post: </b> La lista de reservas está ordenada de forma descendente por costo total.
     */
    public void ordenarReservasPorCosto( )
    {
        int inicial;

        for( inicial = 0; inicial < reservas.size( ); inicial++ )
        {
            int posicionMenor = inicial;
            ReservaViaje reservaMenor = ( ReservaViaje )reservas.get( inicial );

            for( int i = inicial + 1; i < reservas.size( ); i++ )
            {
                ReservaViaje reservaPosicion = ( ReservaViaje )reservas.get( i );
                if( reservaPosicion.compararPorCostoTotal( reservaMenor ) == -1 )
                {
                    reservaMenor = reservaPosicion;
                    posicionMenor = i;
                }
            }

            if( posicionMenor != inicial )
            {
                ReservaViaje temp = ( ReservaViaje )reservas.get( inicial );
                reservas.set( inicial, reservaMenor );
                reservas.set( posicionMenor, temp );
            }
        }

        verificarInvariante( );
    }

    /**
     * Ordena de más antiguo a más reciente la lista de reservas por su fecha de llegada utilizando el algoritmo de burbuja. <br>
     * <b> post: </b> La lista de reservas está ordenada por fecha de llegada al hotel de más antiguo a más reciente.
     */
    public void ordenarReservasPorFechaLlegada( )
    {
        for( int i = reservas.size( ); i > 0; i-- )
        {
            for( int j = 0; j < i - 1; j++ )
            {
                ReservaViaje reserva1 = ( ReservaViaje )reservas.get( j );
                ReservaViaje reserva2 = ( ReservaViaje )reservas.get( j + 1 );

                if( reserva1.darFechaLlegada( ).comparar( reserva2.darFechaLlegada( ) ) < 0 )
                {
                    reservas.set( j, reserva2 );
                    reservas.set( j + 1, reserva1 );
                }
            }
        }
        verificarInvariante( );
    }

    /**
     * Ordena de forma ascendente las reservas por el nombre del hotel utilizando el algoritmo de inserción. <br>
     * <b> post: </b> La lista de reservas está ordenada de forma ascendente por el nombre del cliente que hizo la reserva.
     */
    public void ordenarReservasPorCliente( )
    {
        for( int i = 1; i < reservas.size( ); i++ )
        {
            ReservaViaje porInsertar = ( ReservaViaje )reservas.get( i );
            boolean termino = false;
            for( int j = i; j > 0 && !termino; j-- )
            {
                ReservaViaje reservaTemp = ( ReservaViaje )reservas.get( j - 1 );
                if( reservaTemp.compararPorCliente( porInsertar ) > 0 )
                {
                    reservas.set( j, reservaTemp );
                    reservas.set( j - 1, porInsertar );
                }
                else
                {
                    termino = true;
                }
            }
        }
        verificarInvariante( );
    }

    // -------------------------------------------------------------
    // Invariante
    // -------------------------------------------------------------

    /**
     * Verifica el invariante de la clase. <br>
     * <b> inv: </b> <br>
     * hoteles != null. <br>
     * reservas != null. <br>
     * No pueden existir dos reservas con el mismo cliente.
     */
    private void verificarInvariante( )
    {
        assert ( hoteles != null ) : "La lista de hoteles no puede ser nula.";
        assert ( reservas != null ) : "La lista de reservas no puede ser nula.";
        assert ( !buscarReservasMismoCliente( ) ) : "No pueden existir reservas con el mismo cliente.";
    }

    /**
     * Verifica si hay dos reservas con el mismo cliente.
     * @return True si hay dos reservas con el mismo cliente. False de lo contrario.
     */
    private boolean buscarReservasMismoCliente( )
    {
        boolean hay = false;
        for( int i = 0; i < reservas.size( ) && !hay; i++ )
        {
            ReservaViaje reservaI = ( ReservaViaje )reservas.get( i );
            for( int j = i + 1; j < reservas.size( ) && !hay; j++ )
            {
                ReservaViaje reservaJ = ( ReservaViaje )reservas.get( j );
                if( reservaI.darNombreCliente( ).equals( reservaJ.darNombreCliente( ) ) )
                {
                    hay = true;
                }
            }
        }
        return hay;
    }

    // -----------------------------------------------------------------
    // Puntos de Extensión
    // -----------------------------------------------------------------

    /**
     * Método para la extensión 1.
     * @return Respuesta 1.
     */
    public String metodo1( )
    {
        return "Respuesta 1.";
    }

    /**
     * Método para la extensión 2.
     * @return Respuesta 2.
     */
    public String metodo2( )
    {
        return "Respuesta 2.";
    }

}
